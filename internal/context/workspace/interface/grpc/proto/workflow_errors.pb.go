// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package proto

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsWorkflowNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == WorkflowErrorReason_WORKFLOW_NOT_FOUND.String() && e.Code == 404
}

func ErrorWorkflowNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, WorkflowErrorReason_WORKFLOW_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsWorkflowVersionNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == WorkflowErrorReason_WORKFLOW_VERSION_NOT_FOUND.String() && e.Code == 404
}

func ErrorWorkflowVersionNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, WorkflowErrorReason_WORKFLOW_VERSION_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsWorkflowFileNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == WorkflowErrorReason_WORKFLOW_FILE_NOT_FOUND.String() && e.Code == 404
}

func ErrorWorkflowFileNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, WorkflowErrorReason_WORKFLOW_FILE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsWorkflowValidateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == WorkflowErrorReason_WORKFLOW_VALIDATE_ERROR.String() && e.Code == 404
}

func ErrorWorkflowValidateError(format string, args ...interface{}) *errors.Error {
	return errors.New(404, WorkflowErrorReason_WORKFLOW_VALIDATE_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsWorkflowMainWorkflowFileNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == WorkflowErrorReason_WORKFLOW_MAIN_WORKFLOW_FILE_NOT_EXIST.String() && e.Code == 404
}

func ErrorWorkflowMainWorkflowFileNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(404, WorkflowErrorReason_WORKFLOW_MAIN_WORKFLOW_FILE_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsWorkflowNameDuplicated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == WorkflowErrorReason_WORKFLOW_NAME_DUPLICATED.String() && e.Code == 404
}

func ErrorWorkflowNameDuplicated(format string, args ...interface{}) *errors.Error {
	return errors.New(404, WorkflowErrorReason_WORKFLOW_NAME_DUPLICATED.String(), fmt.Sprintf(format, args...))
}
